---
source: crates/move-syn/tests/sui-framework.rs
expression: ast.tokens_to_string()
---
# [doc = " APIs for accessing time from move calls, via the `Clock`: a unique"] # [doc = " shared object that is created at 0x6 during genesis."] module sui :: clock ; # [doc = " Sender is not @0x0 the system address."] const ENotSystemAddress : u64 = 0 ; # [doc = " Singleton shared object that exposes time to Move calls.  This"] # [doc = " object is found at address 0x6, and can only be read (accessed"] # [doc = " via an immutable reference) by entry functions."] # [doc = ""] # [doc = " Entry Functions that attempt to accept `Clock` by mutable"] # [doc = " reference or value will fail to verify, and honest validators"] # [doc = " will not sign or execute transactions that use `Clock` as an"] # [doc = " input parameter, unless it is passed by immutable reference."] public struct Clock has key { id : UID , # [doc = " The clock's timestamp, which is set automatically by a"] # [doc = " system transaction every time consensus commits a"] # [doc = " schedule, or by `sui::clock::increment_for_testing` during"] # [doc = " testing."] timestamp_ms : u64 , } # [doc = " The `clock`'s current timestamp as a running total of"] # [doc = " milliseconds since an arbitrary point in the past."] public fun timestamp_ms (clock : & Clock) : u64 { clock . timestamp_ms } # [allow (unused_function)] # [doc = " Create and share the singleton Clock -- this function is"] # [doc = " called exactly once, during genesis."] fun create (ctx : & TxContext) { assert ! (ctx . sender () == @ 0x0 , ENotSystemAddress) ; transfer :: share_object (Clock { id : object :: clock () , timestamp_ms : 0 , }) } # [allow (unused_function)] fun consensus_commit_prologue (clock : & mut Clock , timestamp_ms : u64 , ctx : & TxContext) { assert ! (ctx . sender () == @ 0x0 , ENotSystemAddress) ; clock . timestamp_ms = timestamp_ms } # [test_only] # [doc = " Expose the functionality of `create()` (usually only done during"] # [doc = " genesis) for tests that want to create a Clock."] public fun create_for_testing (ctx : & mut TxContext) : Clock { Clock { id : object :: new (ctx) , timestamp_ms : 0 , } } # [test_only] # [doc = " For transactional tests (if a Clock is used as a shared object)."] public fun share_for_testing (clock : Clock) { transfer :: share_object (clock) } # [test_only] public fun increment_for_testing (clock : & mut Clock , tick : u64) { clock . timestamp_ms = clock . timestamp_ms + tick ; } # [test_only] public fun set_for_testing (clock : & mut Clock , timestamp_ms : u64) { assert ! (timestamp_ms >= clock . timestamp_ms) ; clock . timestamp_ms = timestamp_ms ; } # [test_only] public fun destroy_for_testing (clock : Clock) { let Clock { id , timestamp_ms : _ } = clock ; id . delete () ; }
