---
source: crates/move-syn/tests/sui-framework.rs
expression: ast.tokens_to_string()
---
# [doc = " Events module. Defines the `sui::event::emit` function which"] # [doc = " creates and sends a custom MoveEvent as a part of the effects"] # [doc = " certificate of the transaction."] # [doc = ""] # [doc = " Every MoveEvent has the following properties:"] # [doc = "  - sender"] # [doc = "  - type signature (`T`)"] # [doc = "  - event data (the value of `T`)"] # [doc = "  - timestamp (local to a node)"] # [doc = "  - transaction digest"] # [doc = ""] # [doc = " Example:"] # [doc = " ```"] # [doc = " module my::marketplace {"] # [doc = "    use sui::event;"] # [doc = "    /* ... */"] # [doc = "    struct ItemPurchased has copy, drop {"] # [doc = "      item_id: ID, buyer: address"] # [doc = "    }"] # [doc = "    entry fun buy(/* .... */) {"] # [doc = "       /* ... */"] # [doc = "       event::emit(ItemPurchased { item_id: ..., buyer: .... })"] # [doc = "    }"] # [doc = " }"] # [doc = " ```"] module sui :: event ; # [doc = " Emit a custom Move event, sending the data offchain."] # [doc = ""] # [doc = " Used for creating custom indexes and tracking onchain"] # [doc = " activity in a way that suits a specific application the most."] # [doc = ""] # [doc = " The type `T` is the main way to index the event, and can contain"] # [doc = " phantom parameters, eg `emit(MyEvent<phantom T>)`."] public native fun emit < T : copy + drop > (event : T) ; # [test_only] # [doc = " Get the total number of events emitted during execution so far"] public native fun num_events () : u32 ; # [test_only] # [doc = " Get all events of type `T` emitted during execution."] # [doc = " Can only be used in testing,"] public native fun events_by_type < T : copy + drop > () : vector < T > ;
